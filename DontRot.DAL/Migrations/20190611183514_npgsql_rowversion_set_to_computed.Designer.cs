// <auto-generated />
using System;
using DontRot.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DontRot.DAL.Migrations
{
    [DbContext(typeof(DontRotContext))]
    [Migration("20190611183514_npgsql_rowversion_set_to_computed")]
    partial class npgsql_rowversion_set_to_computed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DontRot.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tej"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Felvágott"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Konzerv"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Banán"
                        });
                });

            modelBuilder.Entity("DontRot.DAL.Entities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("ExpiryDateTime");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<int>("SlotId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SlotId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ExpiryDateTime = new DateTime(2019, 6, 16, 20, 35, 13, 893, DateTimeKind.Local).AddTicks(1022),
                            Name = "Mizo dobozos tej",
                            Quantity = 1,
                            RowVersion = 0u,
                            SlotId = 2
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ExpiryDateTime = new DateTime(2019, 6, 14, 20, 35, 13, 896, DateTimeKind.Local).AddTicks(199),
                            Name = "Alföldi zacskós tej",
                            Quantity = 1,
                            RowVersion = 0u,
                            SlotId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ExpiryDateTime = new DateTime(2019, 6, 22, 20, 35, 13, 896, DateTimeKind.Local).AddTicks(253),
                            Name = "Pick szeletelt téliszalámi",
                            Quantity = 5,
                            RowVersion = 0u,
                            SlotId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ExpiryDateTime = new DateTime(2019, 8, 22, 20, 35, 13, 896, DateTimeKind.Local).AddTicks(292),
                            Name = "CBA páros kolbász",
                            Quantity = 1,
                            RowVersion = 0u,
                            SlotId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            ExpiryDateTime = new DateTime(2019, 6, 15, 20, 35, 13, 896, DateTimeKind.Local).AddTicks(327),
                            Name = "Spanyol banán",
                            Quantity = 3,
                            RowVersion = 0u,
                            SlotId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            ExpiryDateTime = new DateTime(2021, 4, 7, 20, 35, 13, 896, DateTimeKind.Local).AddTicks(395),
                            Name = "Bab konzerv",
                            Quantity = 2,
                            RowVersion = 0u,
                            SlotId = 4
                        });
                });

            modelBuilder.Entity("DontRot.DAL.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("StorageId");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Felső polc",
                            StorageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alsó polc",
                            StorageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bal fiók",
                            StorageId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jobb fiók",
                            StorageId = 2
                        });
                });

            modelBuilder.Entity("DontRot.DAL.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hűtő"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Konyhaszekrény"
                        });
                });

            modelBuilder.Entity("DontRot.DAL.Entities.Food", b =>
                {
                    b.HasOne("DontRot.DAL.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DontRot.DAL.Entities.Slot", "Slot")
                        .WithMany("Foods")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DontRot.DAL.Entities.Slot", b =>
                {
                    b.HasOne("DontRot.DAL.Entities.Storage", "Storage")
                        .WithMany("Slots")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
